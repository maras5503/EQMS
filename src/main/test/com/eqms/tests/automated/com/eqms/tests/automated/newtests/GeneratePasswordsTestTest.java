package com.eqms.tests.automated.com.eqms.tests.automated.newtests;// Generated by Selenium IDE
import com.eqms.service.TestService;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class GeneratePasswordsTestTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  private StringBuffer verificationErrors = new StringBuffer();
  public TestService testService;
  @Before
  public void setUp() {
    System.setProperty("webdriver.chrome.driver", "C:/Program Files/chromedriver.exe");
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void generatePasswordsTest() throws Exception {
    driver.get("http://localhost:8080/EQMS_war/auth/login");
    driver.manage().window().setSize(new Dimension(976, 621));
    driver.findElement(By.id("j_username")).click();
    driver.findElement(By.id("j_username")).sendKeys("andrzej.kowalski@gmail.com");
    driver.findElement(By.id("j_password")).click();
    driver.findElement(By.id("j_password")).sendKeys("andrzejkowalski1");
    driver.findElement(By.id("j_password")).sendKeys(Keys.ENTER);
    driver.findElement(By.linkText("Tests")).click();
    Thread.sleep(1000);
    new Select(driver.findElement(By.id("subjectDropDown"))).selectByVisibleText("Bazy danych");
    Thread.sleep(2000);
    driver.findElement(By.id("editTestBtn")).click();
    Thread.sleep(1000);
    driver.findElement(By.id("disableTestBtn")).click();
    Thread.sleep(1000);
    driver.findElement(By.id("confirmDisableTestBtnModal")).click();
    Thread.sleep(2000);
    driver.findElement(By.id("enableTestBtn")).click();
    Thread.sleep(1000);
    driver.findElement(By.id("confirmEnableTestBtnModal")).click();
    Thread.sleep(2000);
    try {
      assertEquals("Disable test", driver.findElement(By.id("disableTestBtn")).getText());
    } catch (Error e) {
      verificationErrors.append(e.toString());
    }

    driver.findElement(By.id("generatePasswordsBtn")).click();
    Thread.sleep(1000);
    new Select(driver.findElement(By.id("studentGroupsDropDown"))).selectByVisibleText("grupa3");
    Thread.sleep(1000);
    driver.findElement(By.id("generatePasswordsBtnModal")).click();
    Thread.sleep(1000);
    String password=driver.findElement(By.cssSelector("#\\33 2 > td:nth-child(4)")).getText();
    driver.findElement(By.cssSelector("form > .btn-default")).click();
    driver.findElement(By.id("j_username")).click();
    driver.findElement(By.id("j_username")).sendKeys("andrewnowak@wp.pl");
    driver.findElement(By.id("j_password")).click();
    driver.findElement(By.id("j_password")).sendKeys(password);
    driver.findElement(By.cssSelector(".btn-md")).click();
  }

  public TestService getTestService() {
    return testService;
  }
}
